{
    "title": "Lightweight & Powerful",
    "block_0_button": "Lightweight",
    "block_0_title": "Lightweight and Dependency-Free",
    "block_0_content": "Built with pure JavaScript and native APIs at its core, achieving a completely dependency-free framework design.<br>Compared to traditional frameworks, its compact size and simple structure effectively reduce web application resource overhead.<br>Without the need for heavy third-party library support, it ensures efficient and stable performance across various runtime environments, particularly suitable for traffic-sensitive mobile scenarios.",
    "block_1_button": "Efficient Rendering",
    "block_1_title": "Efficient Rendering and Data Monitoring",
    "block_1_content": "Incorporates Virtual DOM technology to reconstruct rendering logic, achieving fine-grained data monitoring and updates.<br>The framework automatically detects data changes and updates views with minimal resource consumption, avoiding unnecessary DOM operations.<br>This design significantly improves performance, ensuring the framework can easily handle highly interactive application requirements and provide users with a smoother experience.",
    "block_2_button": "Simple Syntax",
    "block_2_title": "Simple and User-Friendly Syntax",
    "block_2_content": "Provides intuitive and easy-to-understand syntax design, allowing developers to quickly familiarize and apply.<br>Supports syntax like <code>{{value}}</code>, <code>:for</code>, and <code>:if</code>, greatly simplifying common development needs:<br>- Data binding: Directly insert data into views, automatically updating with data changes.<br>- Conditional rendering: Implement branch logic control with concise syntax.<br>- Loop rendering: Efficiently handle lists and multi-layer data structures, reducing redundant code.",
    "block_3_button": "Flexible Compatibility",
    "block_3_title": "Strong Flexibility and Compatibility",
    "block_3_content": "Supports multi-level nesting and custom style settings, flexibly adapting to both single-page applications and multi-page systems.<br>The framework includes complete lifecycle control, allowing developers to precisely manage component behavior and meet complex application scenario requirements through built-in extension capabilities.<br>Efficient compatibility design makes it an ideal choice for multi-platform development.",
    "feature": "Features",
    "subblock_0_title": "Text Replacement",
    "subblock_0_content": "Provides efficient text replacement capabilities:<br>> <code>&#123{value}}</code>: Dynamically insert data into HTML elements, automatically updating with data changes.<br>> <code>:html</code>: Supports insertion of multiple text segments or nested HTML structures, meeting more diverse view requirements.",
    "subblock_1_title": "Conditional Rendering",
    "subblock_1_content": "Implements flexible view display through conditional syntax:<br>> <code>:if</code>: Display elements only when conditions are met.<br>> <code>:else-if / :elif</code>: Used for handling multiple condition branches.<br>> <code>:else</code>: Handle all scenarios that don't meet conditions, simplifying complex logic control.",
    "subblock_2_title": "Loop Rendering",
    "subblock_2_content": "Efficiently handles rendering of lists and multi-layer data structures:<br>> Simple loops: Use <code>item in items</code> to traverse data lists.<br>> Multi-layer structures: Support nested structure rendering like <code>(key, value) in object</code>.<br>> Index support: Obtain data indices for generating dynamic unique identifiers or attributes.",
    "subblock_3_title": "Two-Way Binding",
    "subblock_3_content": "Implements real-time synchronization between form elements and data through <code>:model</code>:<br>> Automatic updates: Data synchronizes instantly with user input.<br>> Simplified process: No need for additional event listeners or logic handling.<br>> Multiple support: Applicable to various form elements including <code>input</code>, <code>textarea</code>, <code>select</code>",
    "subblock_4_title": "Quick CSS Setup",
    "subblock_4_content": "Provides intuitive and easy-to-use CSS quick setup syntax, letting developers focus on functionality rather than style details:<br>> Basic style support: Such as <code>:padding</code, <code>:margin</code>, <code>:border</code>, etc., quickly set element spacing and borders.<br>> Background settings: Support quick setup of background colors or images with <code>:background-color</code>, <code>:background-image</code>.<br>> Dynamic properties: Can bind data to dynamically modify styles, adapting to various interaction needs.",
    "subblock_5_title": "Event Binding",
    "subblock_5_content": "Through the <code>@[event]</code> syntax, QuickUI supports quick binding of various DOM events, implementing flexible interaction logic:<br>> Wide range: Supports common event types like <code>@click</code>, <code>@input</code>, <code>@change</code>, etc.<br>> Custom event handling: Can bind developer-defined callback functions.<br>> Efficient operation: Avoid manually writing lengthy event listening code, improving development efficiency.",
    "zh": "中文",
    "en": "英文"
}